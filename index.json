[{"categories":null,"contents":"","date":"October 16, 2023","hero":"/images/default-hero.jpg","permalink":"https://yong-again.github.io/posts/ml/loss/mse/","summary":"","tags":null,"title":"Mean Squared Error"},{"categories":null,"contents":" dataclass에서 사용되는 메소드 객체의 모든 필드가 초기화 된 직후 “후처리” 작업을 위해 사용됨 이름 그대로 초기화(__init__ ) 이후에 실행되는 로직을 담기 위한 기능 __post_init__의 의미 데이터 클래스는 __init__ 매서드를 자동으로 생성해줌. → 필드를 초기화할 필요가 없음 하지만, 필드 초기화 후 작업이 필요한 경우가 발생 초기화된 값이 유효한지 검증하고 싶을 때 초기화된 값을 조합하여 새로운 속성을 만들고 싶을 때 실행 순서 객체 생성 시 전달된 인자들로 @dataclass 가 자동 생성한 __init__이 먼저 실행됨 모든 필드 초기화 완료 __post_init__ 메서드가 자동으로 호출됨 __post_init__ 의 주요 기능과 예시 초기화 값 검증\n객체가 생성될 때 전달된 값들이 특정 조건을 만족하는지 검사할 수 있음\nfrom dataclasses import dataclass @dataclass class User: username: str age: int def __post_init__(self): print(f\u0026#34;✅ __post_init__ 호출: {self.username}의 나이를 검증합니다.\u0026#34;) if self.age \u0026lt;= 0: raise ValueError(\u0026#34;나이는 0보다 커야 합니다.\u0026#34;) # 정상적인 경우 user1 = User(username=\u0026#34;Alice\u0026#34;, age=30) # \u0026gt;\u0026gt; ✅ __post_init__ 호출: Alice의 나이를 검증합니다. # 비정상적인 경우 try: user2 = User(username=\u0026#34;Bob\u0026#34;, age=-5) except ValueError as e: print(e) # \u0026gt;\u0026gt; ✅ __post_init__ 호출: Bob의 나이를 검증합니다. # \u0026gt;\u0026gt; 나이는 0보다 커야 합니다. ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yong-again.github.io/posts/python/__post__init/","summary":"\u003cul\u003e\n\u003cli\u003edataclass에서 사용되는 메소드\u003c/li\u003e\n\u003cli\u003e객체의 모든 필드가 초기화 된 직후 “후처리” 작업을 위해 사용됨\u003c/li\u003e\n\u003cli\u003e이름 그대로 초기화(\u003ccode\u003e__init__\u003c/code\u003e ) 이후에 실행되는 로직을 담기 위한 기능\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"__post_init__의-의미\"\u003e\u003ccode\u003e__post_init__\u003c/code\u003e의 의미\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e데이터 클래스는 \u003ccode\u003e__init__\u003c/code\u003e 매서드를 자동으로 생성해줌. → 필드를 초기화할 필요가 없음\u003c/li\u003e\n\u003cli\u003e하지만, 필드 초기화 후 작업이 필요한 경우가 발생\n\u003cul\u003e\n\u003cli\u003e초기화된 값이 유효한지 검증하고 싶을 때\u003c/li\u003e\n\u003cli\u003e초기화된 값을 조합하여 새로운 속성을 만들고 싶을 때\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e실행 순서\n\u003cul\u003e\n\u003cli\u003e객체 생성 시 전달된 인자들로 \u003ccode\u003e@dataclass\u003c/code\u003e 가 자동 생성한 \u003ccode\u003e__init__\u003c/code\u003e이 먼저 실행됨\u003c/li\u003e\n\u003cli\u003e모든 필드 초기화 완료\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e__post_init__\u003c/code\u003e 메서드가 자동으로 호출됨\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"__post_init__-의-주요-기능과-예시\"\u003e\u003ccode\u003e__post_init__\u003c/code\u003e 의 주요 기능과 예시\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e초기화 값 검증\u003c/p\u003e","tags":null,"title":"__post_init__ 메서드 이해하기"},{"categories":null,"contents":" 💡 수치형 특성이 두 값의 범위에 안에 놓이도록 스케일$^{(scale)}$을 바꿔야 합니다. 해결 사이킷런의 MinMaxScaler를 사용해 특성 배열의 스케일을 조정합니다.\n# Import Library import numpy as np from sklearn import preprocessing # Make Feature feature = np.array([[-500.5], [-100.1], [0], [100.1], [900.9]]) # Make Scaler Object minmax_scale = preprocessing.MinMaxScaler(feature_range=(0, 1)) # Transfrom Feature sacle scaled_feature = minmax_scale.fit_transform(feature) # Print Feature scaled_Feature \u0026gt;\u0026gt;\u0026gt; array([[0. ], [0.28571429], [0.35714286], [0.42857143], [1. ]]) 설명 최소-최대 스케일링$^{(min-max ; scaling)}$은 특성의 최솟값과 최댓값을 활용하여 일정범위 안으로 값을 조정$^{(보통 ; 0에서1, ; -1에서 1 사이)}$\n$$ x_i^\\prime = \\frac{x_i -min(x)}{max(x)-min(x)} \\ $$\n$x$는 특성 벡터, $x_i$는 특성 $x$의 개별원소, $x^\\prime_i$는 스케일된 원소를 말합니다. 사이킷런의 MinMaxScaler는 특성 스케일을 위해 두 가지 방법을 제공합니다. 첫번째로 fit 메서드를 사용해 특성의 최솟값과 최댓값을 계산한 다음 transform 메서드로 특성의 스케일을 조정합니다.\n두 번째로, fit_transform 메서드로 두 연산을 한번에 처리합니다. 이 둘 사이에 계산상 차이는 없습니다. 동일한 변환을 다른 데이터 세트에 적용하려면 fit 메서드와 transform 메서드를 따로 호출 해야합니다.\n💡덧붙임\n훈련 세트와 테스트 세트의 스케일을 따로 조정하면 안됩니다. 예를 들면 훈련 세트의 스케일을 조정하고자 구한 최솟값과 최댓값을 사용하여 테스트 세트를 변환해야 합니다. 그 이유를 간단한 예를 통해서 알아 보겠습니다.\n샘플 중 처음 세 개를 훈련 세트, 나머지 두 개를 테스트 세트라고 가정해 보겠습니다. 먼저 두 세트를 독립적으로 각각 변환합니다.\n# Make Feature feature = np.array([[-500.5], [-100.1], [0], [100.1], [900.9]]) # Transform Train Data set preprocessing.MinMaxScaler().fit_transform(feature[:3]) \u0026gt;\u0026gt;\u0026gt; array([[0. ], [0.8], [1. ]]) # Transform Test Data set preprocessing.MinMaxScaler().fit_transform(feature[3:]) \u0026gt;\u0026gt;\u0026gt; array([[0.], [1.]]) 훈련 세트와 테스트 세트를 가각 변환하면 서로 다른 비율로 데이터를 변환합니다. 훈련세트에 있는 0과 테스트 세트에 있는 900.9가 모두 1로 바뀌었습니다.\n이번에는 훈련 세트에서 학습한 변환기로 테스트 세트를 학습해보겠습니다.\n# Scale transform training to train data set scaler = preprocessing.MinMaxScaler().fit(feature[:3]) scaler.transform(feature[:3]) \u0026gt;\u0026gt;\u0026gt; array([[0. ], [0.8], [1. ]]) # using trained scaler test data set transform scaler.transform(feature[3:]) \u0026gt;\u0026gt;\u0026gt; array([[1.2], [2.8]]) 훈련 세트를 학습한 변환기 객체를 사용하여 원본 데이터셋과 동일한 비율로 테스트 세트를 변환했습니다.\n그 결과 서로 다른 비율로 데이터를 변환하게 된다면 스케일링 후 데이터가 왜곡됩니다.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yong-again.github.io/posts/math/stactistics/temp/","summary":"\u003caside\u003e\n💡 수치형 특성이 두 값의 범위에 안에 놓이도록 스케일$^{(scale)}$을 바꿔야 합니다.\n\u003c/aside\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003e해결\u003c/code\u003e\u003c/strong\u003e  사이킷런의 MinMaxScaler를 사용해 특성 배열의 스케일을 조정합니다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Import Library\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e numpy \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e np\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e sklearn \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e preprocessing\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Make Feature\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efeature \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray([[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e500.5\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    [\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100.1\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    [\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    [\u003cspan style=\"color:#ae81ff\"\u003e100.1\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    [\u003cspan style=\"color:#ae81ff\"\u003e900.9\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Make Scaler Object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminmax_scale \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e preprocessing\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eMinMaxScaler(feature_range\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Transfrom Feature sacle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escaled_feature \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e minmax_scale\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit_transform(feature)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Print Feature\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escaled_Feature\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earray([[\u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e        ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       [\u003cspan style=\"color:#ae81ff\"\u003e0.28571429\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       [\u003cspan style=\"color:#ae81ff\"\u003e0.35714286\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       [\u003cspan style=\"color:#ae81ff\"\u003e0.42857143\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       [\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e        ]])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003e설명\u003c/code\u003e\u003c/strong\u003e 최소-최대 스케일링$^{(min-max ; scaling)}$은 특성의 최솟값과 최댓값을 활용하여 일정범위 안으로 값을 조정$^{(보통 ; 0에서1, ; -1에서 1 사이)}$\u003c/p\u003e","tags":null,"title":"1. Basic Concepts of Statistics"},{"categories":null,"contents":"Introduction In machine learning, a loss function is a mathematical function that quantifies the difference between the predicted\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yong-again.github.io/posts/ml/loss/basic_loss_func/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn machine learning, a loss function is a mathematical function that quantifies the difference between the predicted\u003c/p\u003e","tags":null,"title":"1. Basic Loss Functions"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yong-again.github.io/posts/ml/cookbook/feature/","summary":"","tags":null,"title":"1. Feature Extractions"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yong-again.github.io/posts/ml/cookbook/scaling/","summary":"","tags":null,"title":"2. Sclaing"},{"categories":null,"contents":" 💡 특성을 평균이 0이고 표준편차가 1이 되도록 변환해야 합니다. 해결 사이킷런의 StandardScaler를 사용하여 두 변환을 모두 수행 할 수 있습니다.\n# Import Library import numpy as np from sklearn import preprocessing # Make Feature x = np.array([[-1000.1], [-200.2], [500.5], [600.6], [9000.9]]) reshape_x = x.reshape(-1,1) # Make Scaler Object scaler = preprocessing.StandardScaler() # Feature Transform standardized = scaler.fit_transform(reshape_x) standardized \u0026gt;\u0026gt;\u0026gt; array([[-0.76058269], [-0.54177196], [-0.35009716], [-0.32271504], [ 1.97516685]]) 설명\n이 방식은 표준화를 사용하여 데이터의 평균 $\\bar x$가 0이고 표준편차 $\\sigma$가 1이 되도록 변환합니다.\n$$ x^\\prime_i = \\frac{x_i-\\bar x}{\\sigma} $$\n$x^\\prime_i$는 $x_i$의 표준화된 상태입니다. 변환된 특성은 원본 값이 특성 평균에서 몇 표준편차만큼 떨어져 있는지로 표현합니다.(통계학에서는 z-score)\nmin-max scaling 보다 많이 쓰이지만 학습 알고리즘에 특화 되어있습니다. 예를들어 주성분 분석$^{(principal ; component ; analiysis)}$은 표준화가 적합하지만 신경망$^{(neural ; network)}$에는 min-max scaling을 종종 권장합니다. 일반적으로 다른 방법을 사용할 특별한 이유가 없으면 표준화를 추천합니다.\n위 출력결과에서 평균과 표준편차를 구해 표준화의 효과를 살펴보겠습니다.\n# print average \u0026amp; std print(\u0026#39;average: \u0026#39;, round(standardized.mean())) print(\u0026#39;standard deviation: \u0026#39;, standardized.std()) \u0026gt;\u0026gt;\u0026gt; average: 0 standard deviation: 1.0 데이터에 이상치가 많다면 중간값과 사분위 범위를 사용하여 특성을 표준화하는 것이 좋습니다. 이상치가 평균과 표준치에 부정적 영향을 끼치기 때문입니다. 사이킷런의 RobustScaler 가 이런 방법을 제공합니다.\n# Make Transform object robust_scaler = preprocessing.RobustScaler() # Feature transform robust_scaler.fit_transform(x) \u0026gt;\u0026gt;\u0026gt; array([[-1.87387612], [-0.875 ], [ 0. ], [ 0.125 ], [10.61488511]]) 💡 덧붙임\n데이터를 오름차순으로 나열했을 때 75%에 위치한 값(3사분위수)과 25%에 위치한 값(1사분위수)의 차를 사분위범위$^{(interquatile ; range)}$(IQR)이라고 부릅니다. Robustscaler 는 데이터에서 중간값을 빼고 IQR로 나눕니다.\ninterquatile_range = x[3] - x[1] (x - np.median(x)) / interquatile_range \u0026gt;\u0026gt;\u0026gt; array([[-1.87387612], [-0.875 ], [ 0. ], [ 0.125 ], [10.61488511]]) QuantileTransformer 는 훈련 데이터를 1,000개의 분위로 나누어 0~1 사이에 고르게 분포시킴으로 이상치로 인한 영향을 줄입니다.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yong-again.github.io/posts/ml/cookbook/standard_scaler/","summary":"\u003chr\u003e\n\u003caside\u003e\n💡 특성을 평균이 0이고 표준편차가 1이 되도록 변환해야 합니다.\n\u003c/aside\u003e\n\u003cp\u003e\u003ccode\u003e해결\u003c/code\u003e  사이킷런의 StandardScaler를 사용하여 두 변환을 모두 수행 할 수 있습니다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Import Library\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e numpy \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e np\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e sklearn \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e preprocessing\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Make Feature\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray([[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1000.1\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              [\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e200.2\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              [\u003cspan style=\"color:#ae81ff\"\u003e500.5\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              [\u003cspan style=\"color:#ae81ff\"\u003e600.6\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              [\u003cspan style=\"color:#ae81ff\"\u003e9000.9\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ereshape_x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e x\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereshape(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Make Scaler Object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escaler \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e preprocessing\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eStandardScaler()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Feature Transform\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estandardized \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit_transform(reshape_x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estandardized\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earray([[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.76058269\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       [\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.54177196\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       [\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.35009716\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       [\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.32271504\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       [ \u003cspan style=\"color:#ae81ff\"\u003e1.97516685\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e설명\u003c/code\u003e\u003c/p\u003e","tags":null,"title":"3. Standard Scaler"},{"categories":null,"contents":" 데코레이터 : Wrapping과 비슷! → 기존의 작성된 함수 및 클래스 를 수정하지 않고, 그 위에 추가적인 기능을 덧씌우거나 감싸서 새로운 기능을 부여하는것. 데코레이터의 역할 어떤 함수(클래스)를 받아서, 기능을 추가한 새로운 함수(클래스)를 돌려주는 함수 원래함수 def say_hello(): print(\u0026#34;Hello!) 데코레이터 만들기 def add_emojis_decorator(original_function): # \u0026#39;original_function\u0026#39; (여기서는 say_hello)을 인자로 받음 def wrapper(): print(\u0026#34;✨🎉✨\u0026#34;) # 1. 원래 함수 실행 전에 기능 추가 original_function() # 2. 원래 함수 실행 print(\u0026#34;✨🎉✨\u0026#34;) # 3. 원래 함수 실행 후에 기능 추가 return wrapper # 4. 기능이 추가된 새로운 함수(wrapper)를 반환 데코레이터 적용 @add_emojis_decorator def say_hello(): print(\u0026#34;안녕하세요!\u0026#34;) # 이제 say_hello()를 호출하면... say_hello() 실행결과:\n✨🎉✨ 안녕하세요! ✨🎉✨ @ 기호는 아래 코드를 단축한 표현이라고 보면 된다!\nsay_hello = add_emojis_decorator(say_hello) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yong-again.github.io/posts/python/decorator/","summary":"\u003cul\u003e\n\u003cli\u003e데코레이터 : Wrapping과 비슷! → 기존의 작성된 함수 및 클래스 를 수정하지 않고, 그 위에 추가적인 기능을 덧씌우거나 감싸서 새로운 기능을 부여하는것.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"데코레이터의-역할\"\u003e데코레이터의 역할\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e어떤 함수(클래스)를 받아서, 기능을 추가한 새로운 함수(클래스)를 돌려주는 함수\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e원래함수\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esay_hello\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello!)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e데코레이터 만들기\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd_emojis_decorator\u003c/span\u003e(original_function):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# \u0026#39;original_function\u0026#39; (여기서는 say_hello)을 인자로 받음\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewrapper\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;✨🎉✨\u0026#34;\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e# 1. 원래 함수 실행 전에 기능 추가\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        original_function() \u003cspan style=\"color:#75715e\"\u003e# 2. 원래 함수 실행\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;✨🎉✨\u0026#34;\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e# 3. 원래 함수 실행 후에 기능 추가\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e wrapper \u003cspan style=\"color:#75715e\"\u003e# 4. 기능이 추가된 새로운 함수(wrapper)를 반환\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e데코레이터 적용\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@add_emojis_decorator\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esay_hello\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;안녕하세요!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 이제 say_hello()를 호출하면...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esay_hello()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e실행결과:\u003c/p\u003e","tags":null,"title":"Decorator"}]