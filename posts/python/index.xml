<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Yong's Blog</title><link>https://yong-again.github.io/posts/python/</link><description>Recent content in Python on Yong's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://yong-again.github.io/posts/python/index.xml" rel="self" type="application/rss+xml"/><item><title>__post_init__ 메서드 이해하기</title><link>https://yong-again.github.io/posts/python/__post__init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yong-again.github.io/posts/python/__post__init/</guid><description>&lt;ul&gt;
&lt;li&gt;dataclass에서 사용되는 메소드&lt;/li&gt;
&lt;li&gt;객체의 모든 필드가 초기화 된 직후 “후처리” 작업을 위해 사용됨&lt;/li&gt;
&lt;li&gt;이름 그대로 초기화(&lt;code&gt;__init__&lt;/code&gt; ) 이후에 실행되는 로직을 담기 위한 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="__post_init__의-의미"&gt;&lt;code&gt;__post_init__&lt;/code&gt;의 의미&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;데이터 클래스는 &lt;code&gt;__init__&lt;/code&gt; 매서드를 자동으로 생성해줌. → 필드를 초기화할 필요가 없음&lt;/li&gt;
&lt;li&gt;하지만, 필드 초기화 후 작업이 필요한 경우가 발생
&lt;ul&gt;
&lt;li&gt;초기화된 값이 유효한지 검증하고 싶을 때&lt;/li&gt;
&lt;li&gt;초기화된 값을 조합하여 새로운 속성을 만들고 싶을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실행 순서
&lt;ul&gt;
&lt;li&gt;객체 생성 시 전달된 인자들로 &lt;code&gt;@dataclass&lt;/code&gt; 가 자동 생성한 &lt;code&gt;__init__&lt;/code&gt;이 먼저 실행됨&lt;/li&gt;
&lt;li&gt;모든 필드 초기화 완료&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__post_init__&lt;/code&gt; 메서드가 자동으로 호출됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="__post_init__-의-주요-기능과-예시"&gt;&lt;code&gt;__post_init__&lt;/code&gt; 의 주요 기능과 예시&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;초기화 값 검증&lt;/p&gt;</description></item><item><title>Decorator</title><link>https://yong-again.github.io/posts/python/decorator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yong-again.github.io/posts/python/decorator/</guid><description>&lt;ul&gt;
&lt;li&gt;데코레이터 : Wrapping과 비슷! → 기존의 작성된 함수 및 클래스 를 수정하지 않고, 그 위에 추가적인 기능을 덧씌우거나 감싸서 새로운 기능을 부여하는것.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="데코레이터의-역할"&gt;데코레이터의 역할&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;어떤 함수(클래스)를 받아서, 기능을 추가한 새로운 함수(클래스)를 돌려주는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;원래함수&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;say_hello&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello!)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;데코레이터 만들기&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add_emojis_decorator&lt;/span&gt;(original_function):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# &amp;#39;original_function&amp;#39; (여기서는 say_hello)을 인자로 받음&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;wrapper&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;✨🎉✨&amp;#34;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 1. 원래 함수 실행 전에 기능 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; original_function() &lt;span style="color:#75715e"&gt;# 2. 원래 함수 실행&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;✨🎉✨&amp;#34;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 3. 원래 함수 실행 후에 기능 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; wrapper &lt;span style="color:#75715e"&gt;# 4. 기능이 추가된 새로운 함수(wrapper)를 반환&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;데코레이터 적용&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@add_emojis_decorator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;say_hello&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;안녕하세요!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 이제 say_hello()를 호출하면...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;say_hello()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실행결과:&lt;/p&gt;</description></item></channel></rss>